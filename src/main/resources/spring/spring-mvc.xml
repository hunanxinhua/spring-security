<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:contex="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--  开启注解扫描，采用注解的方式配置bean  -->
    <contex:annotation-config/>

    <bean id="conversionService" class="org.springframework.format.support.DefaultFormattingConversionService"/>

    <bean id="webBindingInitializer" class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
        <property name="conversionService" ref="conversionService"></property>
    </bean>

    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="webBindingInitializer" ref="webBindingInitializer"></property>
        <property name="messageConverters">
            <list>
                <ref bean="stringConverter" />
                <!--<ref bean="fastjsonConverter" />-->
            </list>
        </property>
    </bean>

    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 默认扫描的包路径 -->
    <!-- 设置只扫描 @Controller注解的Bean,添加 use-default-filters="false"-->
    <!--<contex:component-scan base-package="com.youge.*.controller" use-default-filters="false">
        <contex:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <contex:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </contex:component-scan>-->
    <mvc:default-servlet-handler/>

    <!-- 定义首页 -->
   <!-- <mvc:view-controller path="/" view-name="redirect:/login.jsp" />-->

    <!-- 解析String请求数据 -->
    <bean id="stringConverter"
          class="org.springframework.http.converter.StringHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/plain;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- 解析json请求数据，将json转换为java对象 -->
    <!--<bean id="fastjsonConverter"
          class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                &lt;!&ndash; 这里顺序不能反，一定先写text/html，不然ie下出现下载提示 &ndash;&gt;
                <value>text/html;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    &lt;!&ndash; 防止循环引用 &ndash;&gt;
    <bean id="DisableCircularReferenceDetect"
          class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
        <property name="staticField"
                  value="com.alibaba.fastjson.serializer.SerializerFeature.DisableCircularReferenceDetect"></property>
    </bean>-->


    <!-- ContentNegotiatingViewResolver视图解析器，返回多视图 -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1"></property>
        <property name="defaultViews">
            <list>
                <!-- json视图 -->
               <!-- <bean class="com.alibaba.fastjson.support.spring.FastJsonJsonView">
                    <property name="extractValueFromSingleKeyModel" value="true" />
                </bean>-->
            </list>
        </property>

        <property name="viewResolvers">
            <list>
                <!-- 视图解析器，根据视图的名称new ModelAndView(name)，在配置文件查找对应的bean配置 -->
                <bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />

                <bean
                        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="viewClass"
                              value="org.springframework.web.servlet.view.JstlView" />
                    <property name="contentType" value="text/html" />
                    <property name="prefix" value="/WEB-INF/views/" />
                    <property name="suffix" value=".jsp" />
                </bean>

            </list>
        </property>

    </bean>

    <!-- 配置静态资源，这种方式效率相对比较低,如果DispatcherServlet拦截类似 *.do 这种格式的URL，就不存在访问不到静态资源的问题 -->
    <!--
    <mvc:default-servlet-handler/>
     -->

    <!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />
    </bean>


</beans>